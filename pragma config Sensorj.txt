#pragma config(Sensor, S1,     u,              sensorEV3_Ultrasonic)
#pragma config(Sensor, S3,     barvicky,       sensorColorNxtFULL)
#pragma config(Sensor, S4,     c,              sensorEV3_Color)
#pragma config(Motor,  motorA,          Sanna,         tmotorEV3_Large, PIDControl, driveLeft, encoder)
#pragma config(Motor,  motorD,          Kalousek,      tmotorEV3_Large, PIDControl, driveRight, encoder)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

int minLight=100;
int barva = 0;
bool jedu = false;

task Mereni(){
      while(true){
            if(minLight>SensorValue[c])
                  minLight=SensorValue[c];
      }
}

void CaraPid(){
      int idealniHodnota=20;
      int v=10;
      float index=0.5;
      int namerenaHodnota=SensorValue[c];
      int rozdilHodnot=namerenaHodnota-idealniHodnota;
      if(SensorValue[barvicky] == barva)
      {
                  motor[Sanna]=0;
      motor[Kalousek]=0;
      wait10Msec(20);
            motor[Sanna]=v+index*rozdilHodnot;
      motor[Kalousek]=v-index*rozdilHodnot;
      wait10Msec(20);
      }
      else
      {
      motor[Sanna]=v+index*rozdilHodnot;
      motor[Kalousek]=v-index*rozdilHodnot;
      }
}



task main()
{
waitForButtonPress();
if(getButtonPress(buttonLeft) == 1)
      {
            barva = 4;
      }
      if(getButtonPress(buttonRight) == 1)
      {
            barva = 5;
      }
      if(getButtonPress(buttonUp) == 1)
      {
            barva = 2;
      }
      if(getButtonPress(buttonDown) == 1)
      {
            barva = 3;
      }

startTask(Mereni);
while(true)
{
      CaraPid();
}
}
